[1]  F. Aarts, B. Jonsson, and J. Uijen. Generating models of infinite-state communication protocols using regular inference with abstraction. In Testing Software and Systems – 22nd IFIP WG 6.1 International Conference, ICTSS, volume 6435 of Lecture Notes in Computer Science, pages 188–204. Springer, 2010.
[2]  P. A. Abdulla. Well (and better) quasi-ordered transition systems. Bull. Symbolic Logic, 16(4):457–515, 2010.
[3]  P. A. Abdulla, M. F. Atig, Y.-F. Chen, C. Leonardsson, and A. Rezine. Counter-example guided fence insertion under TSO. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 7214 of Lecture Notes in Computer Science, pages 204–219. Springer, 2012.
[4]  P. A. Abdulla, J. Cederberg, and T. Vojnar. Monotonic abstraction for programs with multiply-linked structures. Int. J. Found. Comput. Sci., 24(2):187–210, 2013.
[5]  P. A. Abdulla, K. Cerans, B. Jonsson, and Y. Tsay. General decidability theorems for infinite-state systems. In Logic in Computer Science, LICS, pages 313–321. IEEE Computer Society, 1996.
[6]  P. A. Abdulla and G. Delzanno. Parameterized verification. STTT, 18(5):469–473, 2016.
[7]  P. A. Abdulla, G. Delzanno, and A. Rezine. Monotonic abstraction in action. In International Colloquium on Theoretical Aspects of Computing, volume 5160 of Lecture Notes in Computer Science, pages 50–65. Springer, 2008.
[8]  P. A. Abdulla, G. Delzanno, O. Rezine, A. Sangnier, and R. Traverso. Parameterized verification of time-sensitive models of ad hoc network protocols. Theor. Comput. Sci., 612:1–22, 2016.
[9]  P. A. Abdulla, F. Haziza, and L. Holík. All for the price of few. In Verification, Model Checking, and Abstract Interpretation, VMCAI, volume 7737 of Lecture Notes in Computer Science, pages 476–495. Springer, 2013.
[10]  P. A. Abdulla and B. Jonsson. Verifying networks of timed processes (extended abstract). In Tools and Algorithms for Construction and Analysis of Systems, TACAS, volume 1384 of Lecture Notes in Computer Science, pages 298–312. Springer, 1998.   
[11]  S. Aggarwal, R. P. Kurshan, and K. Sabnani. A calculus for protocol specification and validation. In H. Rudin and C. H. West, editors, Protocol Specification, Testing and Verification, pages 19–34. North Holland, 1983.
[12]  A. V. Aho, J. E. Hopcroft, and J. D. Ullman. The Design and Analysis of Computer Algorithms. Addison-Wesley, 1974.   
[13]  S. B. Akers. Binary decision diagrams. IEEE Trans. Computers, C-27(6):509–516, 1978.   
[14]  F. A. Aloul, I. L. Markov, and K. A. Sakallah. FORCE: a fast and easy-to-implement variable-ordering heuristic. In Great Lakes Symposium on VLSI, pages 116–119, 2003.   
[15]  F. A. Aloul, A. Ramani, K. A. Sakallah, and I. L. Markov. Solution and optimization of systems of pseudo-Boolean constraints. IEEE Trans. Computers, 56(10):1415–1424, 2007.   
[16]  B. Alpern and F. Schneider. Defining liveness. Inform. Proc. Lett., 21:181–185, 1985.   
[17]  R. Alur. Techniques for Automatic Verification of Real-Time Systems. PhD thesis, Stanford University, 1991.
[18]  R. Alur, R. K. Brayton, T. A. Henzinger, S. Qudeer, and S. Rajamani. Partial–order reduction in symbolic state space explosion. In O. Grumberg, editor, Computer Aided Verification, CAV, volume 1254 of Lecture Notes in Computer Science, pages 340–351. Springer, 1997.   
[19]  R. Alur, C. Courcoubetis, and D. Dill. Model-checking for real-time systems. In Logic in Computer Science, LICS, pages 414–425. IEEE Computer Society Press, 1990.   
[20]  R. Alur and D. L. Dill. A theory of timed automata. Theor. Comput. Sci., 126(2):183–235, 1994.   
[21]  R. Alur and D. L. Dill. Automata-theoretic verification of real-time systems. In C. Heitmeyer and D. Mandrioli, editors, Formal Methods for Real-Time Computing, pages 55–80. Wiley, 1996.   
[22]  R. Alur and T. A. Henzinger. Reactive modules. Formal Methods Syst. Design, 15(1):7–48, 1999.
[23]  R. Alur and R. P. Kurshan. Timing analysis in COSPAN. In Hybrid Systems III. Verification and Control, volume 1066 of Lecture Notes in Computer Science, pages 220–231. Springer, 1995.   
[24]  R. Alur, P. Madhusudan, and W. Nam. Symbolic compositional verification by learning assumptions. In Computer Aided Verification, CAV, volume 3576 of Lecture Notes in Computer Science, pages 548–562. Springer, 2005.   
[25]  B. Aminof, T. Kotek, S. Rubin, F. Spegni, and H. Veith. Parameterized model checking of rendezvous systems. In Concurrency Theory, CONCUR, volume 8704 of Lecture Notes in Computer Science, pages 109–124. Springer, 2014.   
[26]  H. R. Andersen. Model checking and Boolean graphs. In B. Krieg-Bruckner, editor, European Symposium on Programming, ESOP, volume 582 of Lecture Notes in Computer Science, pages 1–19. Springer, 1992.   
[27]  D. Angluin. Learning regular sets from queries and counterexamples. Inf. Comput., 75(2):87–106, 1987.
[28]  K. Apt and D. Kozen. Limits for automatic verification of finite-state systems. IPL, 15:307–309, 1986.   
[29]  A. Armando, C. Castellini, and E. Giunchiglia. SAT-based procedures for temporal reasoning. In S. Biundo and M. Fox, editors, Recent Advances in AI Planning, 5th European Conference on Planning, ECP, volume 1809 of Lecture Notes in Computer Science, pages 97–108. Springer, 2000.   
[30]  R. Armoni, L. Fix, A. Flaisher, R. Gerth, B. Ginsburg, T. Kanza, A. Landver, S. Mador-Haim, E. Singerman, A. Tiemeyer, M. Vardi, and Y. Zbar. The ForSpec temporal logic: A new temporal property-specification logic. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 2280 of Lecture Notes in Computer Science, pages 196–211. Springer, 2002.   
[31]  R. Armoni, L. Fix, R. Fraer, S. Huddleston, N. Piterman, and M. Y. Vardi. SAT-based induction for temporal safety properties. Electr. Notes Theor. Comput. Sci., 119(2):3–16, 2005.   
[32]  G. Audemard and L. Simon. Predicting learnt clauses quality in modern SAT solvers. In C. Boutilier, editor, International Joint Conference on Artificial Intelligence, IJCAI, pages 399–404, 2009.   
[33]  A. Aziz, V. Singhal, F. Balarin, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. Equivalences for fair Kripke structures. In S. Abiteboul and E. Shamir, editors, International Colloquium on Automata, Languages and Programming, ICALP, volume 820 of Lecture Notes in Computer Science, pages 364–375. Springer, 1994.   
[34]   F. Bacchus and J. Winter. Effective preprocessing with hyper-resolution and equality reduction. In E. Giunchiglia and A. Tacchella, editors, Theory and Applications of Satisfiability Testing, SAT, volume 2919 of Lecture Notes in Computer Science, pages 341–355. Springer, 2004.   
[35]  C. Baier and J. Katoen. Principles of Model Checking. MIT Press, 2008.   
[36]  F. Balarin and A. Sangiovanni-Vincentelli. On the automatic computation of network invariants. In Dill [186], pages 235–246.   
[37]  T. Ball, E. Bounimova, B. Cook, V. Levin, J. Lichtenberg, C. McGarvey, B. Ondrusek, S. K. Rajamani, and A. Ustuner. Thorough static analysis of device drivers. In Proceedings of the 2006 EuroSys Conference, pages 73–85. ACM, 2006.   
[38]  T. Ball, S. Chaki, and S. K. Rajamani. Parameterized verification of multithreaded software libraries. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 2031 of Lecture Notes in Computer Science, pages 158–173. Springer, 2001.   
[39]  T. Ball and R. B. Jones, editors. Computer Aided Verification, CAV, volume 4144 of Lecture Notes in Computer Science. Springer, 2006.   
[40]  T. Ball, A. Podelski, and S. K. Rajamani. Boolean and Cartesian abstraction for model checking C programs. In T. Margaria and W. Yi, editors, Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 2031 of Lecture Notes in Computer Science, pages 268–283. Springer, 2001.   
[41]  T. Ball and S. Rajamani. Boolean programs: A model and process for software analysis. Technical Report 2000-14, Microsoft Research, 2000.   
[42]  T. Ball and S. K. Rajamani. The SLAM toolkit. In Computer Aided Verification, CAV, volume 2102 of Lecture Notes in Computer Science, pages 260–264. Springer, 2001.   
[43]  S. Barner, D. Geist, and A. Gringauze. Symbolic localization reduction with reconstruction layering and backtracking. In Computer Aided Verification, CAV, volume 2404 of Lecture Notes in Computer Science, pages 65–77. Springer, 2002.
[44]  D. L. Beatty, R. E. Bryant, and C.-J. Seger. Formal hardware verification by symbolic ternary trajectory evaluation. In Design Automation Conference, DAC, pages 397–402. IEEE Computer Society Press, 1991.   
[45]   I. Beer, S. Ben-David, C. Eisner, D. Geist, L. Gluhovsky, T. Heyman, A. Landver, P. Paanah, Y. Rodeh, G. Ronin, and Y. Wolfsthal. RuleBase: Model checking at IBM. In Computer Aided Verification, CAV, volume 1254 of Lecture Notes in Computer Science, pages 480–483. Springer, 1997.   
[46]  M. Ben-Ari, Z. Manna, and A. Pnueli. The temporal logic of branching time. In Principles of Programming Languages, POPL, pages 164–176. ACM, 1981.   
[47]  M. Ben-Ari, Z. Manna, and A. Pnueli. The temporal logic of branching time. Acta Inf., 20:207–226, 1983.   
[48]  S. Bensalem, A. Bouajjani, C. Loiseaux, and J. Sifakis. Property preserving simulations. In Bochmann and Probst [69], pages 260–273.   
[49]  J. Bergstra, A. Ponse, and S. Smolka, editors. Handbook of Process Algebra. Elsevier, 2001.   
[50]  O. Bernholtz, M. Y. Vardi, and P. Wolper. An automata theoretic approach to branching time model checking. In Dill [186], pages 142–155.   
[51]  N. Bertrand, G. Delzanno, B. König, A. Sangnier, and J. Stückrath. On the decidability status of reachability and coverability in graph transformation systems. In Rewriting Techniques and Applications, RTA, volume 15 of Leibniz International Proceedings in Informatics, pages 101–116. Schloss Dagstuhl–Leibniz Center for Informatics, 2012.   
[52]  D. Beyer, A. Chlipala, T. A. Henzinger, R. Jhala, and R. Majumdar. The BLAST query language for software verification. In R. Giacobazzi, editor, SAS, volume 3148 of Lecture Notes in Computer Science, pages 2–18. Springer, 2004.   
[53]  D. Beyer, T. A. Henzinger, and G. Théoduloz. Configurable software verification: Concretizing the convergence of model checking and program analysis. In W. Damm and H. Hermanns, editors, Computer Aided Verification, CAV, volume 4590 of Lecture Notes in Computer Science, pages 504–518. Springer, 2007.   
[54]  G. Bhat, R. Cleaveland, and O. Grumberg. Efficient on-the-fly model checking for CTL*. In Logic in Computer Science, LICS, pages 388–397. IEEE Computer Society, 1995.   
[55]  A. Biere. μ cke—efficient μ calculus model checking. In Computer Aided Verification, CAV, volume 1254 of Lecture Notes in Computer Science, pages 468–471. Springer, 1997.   
[56]  A. Biere. Adaptive restart strategies for conflict driven SAT solvers. In H. K. Büning and X. Zhao, editors, Theory and Applications of Satisfiability Testing, SAT, volume 4996 of Lecture Notes in Computer Science, pages 28–33. Springer, 2008.   
[57]  A. Biere, C. Artho, and V. Schuppan. Liveness checking as safety checking. Electr. Notes Theor. Comput. Sci., 66(2):160–177, 2002.   
[58]  A. Biere, A. Cimatti, E. M. Clarke, M. Fujita, and Y. Zhu. Symbolic model checking using SAT procedures instead of BDDs. In Design Automation Conference, DAC, pages 317–320. IEEE Computer Society, 1999.   
[59]  A. Biere, A. Cimatti, E. M. Clarke, and Y. Zhu. Symbolic model checking without BDDs. In R. Cleaveland, editor, Tools and Algorithms for Construction and Analysis of Systems, TACAS, volume 1579 of Lecture Notes in Computer Science, pages 193–207. Springer, 1999.
[60]  A. Biere and A. Fröhlich. Evaluating CDCL variable scoring schemes. In Theory and Applications of Satisfiability Testing, SAT, volume 9340 of Lecture Notes in Computer Science, pages 405–422. Springer, 2015.   
[61]  A. Biere, M. Heule, H. van Maaren, and T. Walsh, editors. Handbook of Satisfiability, volume 185 of Frontiers in Artificial Intelligence and Applications. IOS Press, 2009.   
[62]   B. D. Bingham, M. R. Greenstreet, and J. D. Bingham. Parameterized verification of deadlock freedom in symmetric cache coherence protocols. In Formal Methods in Computer-Aided Design, FMCAD, pages 186–195, 2011.   
[63]  J. D. Bingham. A new approach to upward-closed set backward reachability analysis. Electr. Notes Theor. Comput. Sci., 138(3):37–48, 2005.   
[64]  J. D. Bingham. Automatic non-interference lemmas for parameterized model checking. In Formal Methods in Computer-Aided Design, FMCAD, pages 1–8. IEEE, 2008.   
[65]  P. Bjesse and K. Claessen. SAT-based verification without state space traversal. In W. A. J. Hunt and S. D. Johnson, editors, Formal Methods in Computer-Aided Design, FMCAD, volume 1954 of Lecture Notes in Computer Science, pages 372–389. Springer, 2000.
[66]   R. Bloem, S. Jacobs, A. Khalimov, I. Konnov, S. Rubin, H. Veith, and J. Widder. Decidability in parameterized verification. SIGACT News, 47(2):53–64, 2016.   
[67]  M. G. Bobaru, C. S. Pasareanu, and D. Giannakopoulou. Automated assume-guarantee reasoning by abstraction refinement. In Computer Aided Verification, CAV, volume 5123 of Lecture Notes in Computer Science, pages 135–148. Springer, 2008.   
[68]  G. V. Bochmann. Hardware specification with temporal logic: An example. IEEE Trans. Computers, 31(3):223–231, 1982.   
[69]  G. V. Bochmann and D. K. Probst, editors. Computer Aided Verification, CAV, volume 663 of Lecture Notes in Computer Science. Springer, 1992.   
[70]  M. Bojańczyk. The common fragment of ACTL and LTL. In Foundations of Software Science and Computational Structures, FOSSACS, volume 4962 of Lecture Notes in Computer Science, pages 172–185. Springer, 2008.   
[71]  P. Bokor, M. Serafini, N. Suri, and H. Veith. Brief announcement: Efficient model checking of fault-tolerant distributed protocols using symmetry reduction. In Distributed Computing, DISC, volume 5805 of Lecture Notes in Computer Science, pages 289–290. Springer, 2009.   
[72]  R. Bonnet. The reachability problem for vector addition system with one zero-test. In Mathematical Foundations of Computer Science, MFCS, volume 6907 of Lecture Notes in Computer Science, pages 145–157. Springer, 2011.   
[73]  S. Bose and A. L. Fisher. Automatic verification of synchronous circuits using symbolic logic simulation and temporal logic. In L. Claesen, editor, Proceedings of the IMEC-IFIP International Workshop on Applied Formal Methods for Correct VLSI Design. Organizing Committe of the IMEC-IFIP, 1989.   
[74]  D. Bosnacki, E. Elkind, B. Genest, and D. A. Peled. On commutativity based edge lean search. Ann. Math. Artif. Intell., 56(2):187–210, 2009.   
[75]  A. Bouajjani, J. Fernandez, and N. Halbwachs. Minimal model generation. In E. M. Clarke and R. P. Kurshan, editors, Computer Aided Verification, CAV, volume 531 of Lecture Notes in Computer Science, pages 197–203. Springer, 1990.
[76]  A. Bouali and R. de Simone. Symbolic bisimulation minimisation. In G. von Bochmann and D. K. Probst, editors, Computer Aided Verification, CAV, volume 663 of Lecture Notes in Computer Science, pages 96–108. Springer, 1993.   
[77]  K. S. Brace, R. L. Rudell, and R. E. Bryant. Efficient implementation of a BDD package. In Design Automation Conference, DAC, pages 40–45. IEEE Computer Society Press, 1990.   
[78]  A. R. Bradley. SAT-based model checking without unrolling. In R. Jhala and D. A. Schmidt, editors, Verification, Model Checking, and Abstract Interpretation, VMCAI, volume 6538 of Lecture Notes in Computer Science, pages 70–87. Springer, 2011.   
[79]  A. R. Bradley. Understanding IC3. In A. Cimatti and R. Sebastiani, editors, Theory and Applications of Satisfiability Testing, SAT, volume 7317 of Lecture Notes in Computer Science, pages 1–14. Springer, 2012.   
[80]  A. R. Bradley and Z. Manna. Checking safety by inductive generalization of counterexamples to induction. In Formal Methods in Computer-Aided Design, FMCAD, pages 173–180. IEEE Computer Society, 2007.   
[81]  M. C. Browne and E. M. Clarke. SML: A high level language for the design and verification of finite state machines. In IFIP WG 10.2 Working Conference from HDL Descriptions to Guaranteed Correct Circuit Designs, pages 269–292. International Federation for Information Processing, 1987.  
[82]  M. C. Browne, E. M. Clarke, and D. Dill. Checking the correctness of sequential circuits. In International Conference on Computer Design, pages 545–548. IEEE, 1985.   
[83]  M. C. Browne, E. M. Clarke, and D. L. Dill. Automatic circuit verification using temporal logic: Two new examples. In Formal Aspects of VLSI Design. Elsevier, 1986.   
[84]  M. C. Browne, E. M. Clarke, D. L. Dill, and B. Mishra. Automatic verification of sequential circuits using temporal logic. IEEE Trans. Comput., C-35(12):1035–1044, 1986.   
[85]  M. C. Browne, E. M. Clarke, and O. Grumberg. Characterizing finite Kripke structures in propositional temporal logic. Theor. Comput. Sci., 59(1–2):115–131, 1988.   
[86]  M. C. Browne, E. M. Clarke, and O. Grumberg. Reasoning about networks with many identical finite state processes. Inf. Comput., 81(1):13–31, 1989.   
[87]  R. E. Bryant. Graph-based algorithms for Boolean function manipulation. IEEE Trans. Comput., 35(8):677–691, 1986.   
[88]  R. E. Bryant. On the complexity of VLSI implementations and graph representations of Boolean functions with application to integer multiplication. IEEE Trans. Comput., 40(2):205–213, 1991.   
[89]  R. E. Bryant. Symbolic Boolean manipulation with ordered binary-decision diagrams. ACM Comput. Surv., 24(3):293–318, 1992.   
[90]  R. E. Bryant and C.-J. Seger. Formal verification of digital circuits using symbolic ternary system models. In Kurshan and Clarke [332], pages 33–43.   
[91]  J. A. Brzozowski and C. J. H. Seger. Advances in asynchronous circuit theory. Part II: Bounded inertial delay models, MOS circuits, design techniques. Bull. Eur. Assoc. Theor. Comput. Sci., 43(3):199–263, 1991.
[92]  J. R. Büchi. On a decision method in restricted second order arithmetic. In International Congress on Logic, Methodology and Philosophy of Science, pages 1–12. Stanford University Press, 1962.   
[93]  J. R. Burch, E. M. Clarke, and D. E. Long. Representing circuits more efficiently in symbolic model checking. In Design Automation Conference, DAC, pages 403–407. ACM, 1991.   
[94]  J. R. Burch, E. M. Clarke, and D. E. Long. Symbolic model checking with partitioned transition relations. In A. Halaas and P. B. Denyer, editors, Very Large Scale Integration, VLSI, volume A-1 of IFIP Transactions, pages 49–58. North-Holland, 1991.   
[95]  J. R. Burch, E. M. Clarke, D. E. Long, K. L. McMillan, and D. L. Dill. Symbolic model checking for sequential circuit verification. IEEE Trans. CAD Integr. Circuits Syst., 13(4):401–424, 1994.   
[96]  J. R. Burch, E. M. Clarke, K. L. McMillan, D. L. Dill, and L. J. Hwang. Symbolic model checking: 10 20 states and beyond. Inform. and Comput., 98(2):142–170, 1992. Originally presented at the 1990 Symposium on Logic in Computer Science (LICS).   
[97]  R. M. Burstall. Program proving as hand simulation with a little induction. In IFIP Congress 74, pages 308–312. North Holland, 1974.   
[98]  D. Bustan and O. Grumberg. Simulation-based minimization. ACM Trans. Comput. Logic, 4(2):181–206, 2003.   
[99]  C. Cadar, D. Dunbar, and D. R. Engler. KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs. In R. Draves and R. van Renesse, editors, Operating Systems Design and Implementation, OSDI, pages 209–224. USENIX Association, 2008.
[100]  S. V. Campos. A Quantitative Approach to the Formal Verification of Real-Time System. PhD thesis, School of Computer Science, Carnegie Mellon University, 1996.
[101]  S. V. Campos and E. M. Clarke. Real-time symbolic model checking for discrete time models. In T. Rus and C. Rattray, editors, Theories and Experiences for Real-time System Development, pages 129–145. World Scientific, 1994.
[102]  S. V. Campos, E. M. Clarke, W. Marrero, and M. Minea. Verus: A tool for quantitative analysis of finite-state real-time systems. In Languages, Compilers and Tools for Real-Time Systems, pages 70–78. ACM, 1995.
[103]  S. V. Campos, E. M. Clarke, W. Marrero, M. Minea, and H. Hiraishi. Computing quantitative characteristics of finite-state real-time systems. In Real-Time Systems Symposium, RTSS, pages 266–270. IEEE Computer Society, 1994.
[104]  S. Chaki, E. M. Clarke, A. Groce, S. Jha, and H. Veith. Modular verification of software components in C. In L. A. Clarke, L. Dillon, and W. F. Tichy, editors, International Conference on Software Engineering, ICSE, pages 385–395. IEEE Computer Society, 2003.
[105]  S. Chaki, E. M. Clarke, N. Sinha, and P. Thati. Automated assume-guarantee reasoning for simulation conformance. In Computer Aided Verification, CAV, volume 3576 of Lecture Notes in Computer Science, pages 534–547. Springer, 2005.
[106]  P. Chambart and P. Schnoebelen. Mixing lossy and perfect Fifo channels. In Concurrency Theory, CONCUR, volume 5201 of Lecture Notes in Computer Science, pages 340–355. Springer, 2008.
[107]  P. Chauhan, E. Clarke, J. Kukula, S. Sapra, H. Veith, and D.Wang. Automated abstraction refinement for model checking large state spaces using SAT based conflict analysis. In Formal Methods in Computer Aided Design, FMCAD, volume 2517 of Lecture Notes in Computer Science, pages 33–51. Springer, 2002.
[108]  H. Chen, C. David, D. Kroening, P. Schrammel, and B. Wachter. Synthesising interprocedural bit-precise termination proofs. In M. B. Cohen, L. Grunske, and M. Whalen, editors, Automated Software Engineering, ASE, pages 53–64. IEEE, 2015.
[109]  Y.-F. Chen, E. M. Clarke, A. Farzan, M.-H. Tsai, Y.-K. Tsay, and B.-Y. Wang. Automated assume-guarantee reasoning through implicit learning. In Computer Aided Verification, CAV, volume 6174 of Lecture Notes in Computer Science, pages 511–526. Springer, 2010.
[110]  Y.-F. Chen, A. Farzan, E. M. Clarke, Y.-K. Tsay, and B.-Y. Wang. Learning minimal separating DFA’s for compositional verification. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 5505 of Lecture Notes in Computer Science, pages 31–45. Springer, 2009.
[111]  W. Choi, G. C. Necula, and K. Sen. Guided GUI testing of Android apps with minimal restart and approximate learning. In Object Oriented Programming Systems Languages & Applications, OOPSLA, pages 623–640. ACM, 2013.
[112]  C.-T. Chou and D. Peled. Verifying a model-checking algorithm. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 1055 of Lecture Notes in Computer Science, pages 241–257. Springer, 1996.
[113]  Y. Choueka. Theories of automata on ω tapes: A simplified approach. J. Comput. Syst. Sci., 8:117–141, 1974.
[114]  T. S. Chow. Testing software design modeled by finite-state machines. IEEE Trans. Software Eng., 4(3):178–187, 1978.
[115]  A. Cimatti, E. M. Clarke, E. Giunchiglia, F. Giunchiglia, M. Pistore, M. Roveri, R. Sebastiani, and A. Tacchella. NuSMV 2: An opensource tool for symbolic model checking. In Computer Aided Verification, CAV, volume 2404 of Lecture Notes in Computer Science, pages 359–364. Springer, 2002.
[116]  A. Cimatti, E. M. Clarke, F. Giunchiglia, and M. Roveri. NuSMV: A new symbolic model checker. STTT, 2(4):410–425, 2000.
[117]  A. Cimatti and A. Griggio. Software model checking via IC3. In Computer Aided Verification, CAV, volume 7358 of Lecture Notes in Computer Science, pages 277–293. Springer, 2012.
[118]  A. Cimatti, A. Griggio, A. Micheli, I. Narasamdya, and M. Roveri. Kratos—a software model checker for SystemC. In Gopalakrishnan and Qadeer [251], pages 310–316.
[119]  A. Cimatti, I. Narasamdya, and M. Roveri. Software model checking SystemC. IEEE Trans. CAD Integr. Circuits Syst., 32(5):774–787, 2013.
[120]  D. Clarke, H. Ben-Abdallah, I. Lee, H. Xie, and O. Sokolsky. XVERSA: An integrated graphical and textual toolset for the specification and analysis of resource-bound real-time systems. In Computer Aided Verification, CAV, volume 1102 of Lecture Notes in Computer Science, pages 402–405. Springer, 1996.
[121]  E. M. Clarke and I. A. Draghicescu. Expressibility results for linear time and branching time logics. In Linear Time, Branching Time, and Partial Order in Logics and Models for Concurrency, volume 354 of Lecture Notes in Computer Science, pages 428–437. Springer, 1988.
[122]  E. M. Clarke, I. A. Draghicescu, and R. P. Kurshan. A unified approach for showing language containment and equivalence between various types of ω automata. In A. Arnold, editor, Colloquium on Trees in Algebra and Programming, CAAP, volume 431 of Lecture Notes in Computer Science, pages 103–116. Springer, 1990.
[123]  E. M. Clarke and E. A. Emerson. Design and synthesis of synchronization skeletons using branching time temporal logic. In D. Kozen, editor, Logic of Programs: Workshop, volume 131 of Lecture Notes in Computer Science, pages 52–71. Springer, 1981.
[124]  E. M. Clarke, E. A. Emerson, and A. P. Sistla. Automatic verification of finite-state concurrent systems using temporal logic specifications. In Principles of Programming Languages, POPL, pages 117–126. ACM, 1983.
[125]   E. M. Clarke, E. A. Emerson, and A. P. Sistla. Automatic verification of finite-state concurrent systems using temporal logic specifications. ACM Trans. Program. Lang. Syst., 8(2):244–263, 1986.
[126]  E. M. Clarke, R. Enders, T. Filkorn, and S. Jha. Exploiting symmetry in temporal logic model checking. Formal Methods Syst. Design, 9:77–104, 1996.
[127]   E. M. Clarke, T. Filkorn, and S. Jha. Exploiting symmetry in temporal logic model checking. In Computer Aided Verification, CAV, volume 697 of Lecture Notes in Computer Science, pages 450–462. Springer, 1993.
[128]  E. M. Clarke, O. Grumberg, and H. Hamaguchi. Another look at LTL model checking. Formal Methods Syst. Design, 10(1):47–71, 1997.
[129]  E. M. Clarke, O. Grumberg, H. Hiraishi, S. Jha, D. E. Long, K. L. McMillan, and L. A. Ness. Verification of the Futurebus+ cache coherence protocol. In L. Claesen, editor, International Symposium on Computer Hardware Description Languages and Their Applications, pages 15–30. North-Holland, 1993.
[130]  E. M. Clarke, O. Grumberg, and S. Jha. Veryfying parameterized networks using abstraction and regular languages. In S. Smolka and I. Lee, editors, Concurrency Theory, CONCUR, volume 962 of Lecture Notes in Computer Science, pages 395–407. Springer, 1995.
[131]  E. M. Clarke, O. Grumberg, and S. Jha. Verifying parametrized networks. ACM Trans. Progr. Lang. Syst., 19(5):726–750, 1997.
[132]  E. M. Clarke, O. Grumberg, S. Jha, Y. Lu, and H. Veith. Counterexample-guided abstraction refinement for symbolic model checking. J. ACM, 50(5):752–794, 2003.
[133]  E. M. Clarke, O. Grumberg, and R. P. Kurshan. A synthesis of two approaches for verifying finite state concurrent systems. In Logic at Botik ’89, Symposium on Logical Foundations of Computer Science, volume 363 of Lecture Notes in Computer Science, pages 81–90. Springer, 1989.
[134]  E. M. Clarke, O. Grumberg, and D. E. Long. Model checking and abstraction. In Principles of Programming Languages, POPL, pages 342–354. ACM, 1992.
[135]  E. M. Clarke, O. Grumberg, and D. E. Long. Model checking and abstraction. ACM Trans. Progr. Lang. Syst., 16(5):1512–1542, 1994.
[136]  E. M. Clarke, O. Grumberg, and D. A. Peled. Model Checking. MIT Press, 1999.
[137]  E. M. Clarke, A. Gupta, J. Kukula, and O. Strichman. SAT based abstraction-refinement using ILP and machine learning techniques. In Computer-Aided Verification, CAV, volume 2404 of Lecture Notes in Computer Science, pages 265–279. Springer, 2002.
[138]  E. M. Clarke, T. A. Henzinger, H. Veith, and R. Bloem. Handbook of Model Checking. Springer, 2018.
[139]  E. M. Clarke, S. Jha, Y. Lu, and H. Veith. Tree-like counterexamples in model checking. In Logic in Computer Science, LICS, pages 19–29. IEEE Computer Society, 2002.
[140]   E. M. Clarke, D. Kroening, and F. Lerda. A tool for checking ANSI-C programs. In K. Jensen and A. Podelski, editors, Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 2988 of Lecture Notes in Computer Science, pages 168–176. Springer, 2004.
[141]  E. M. Clarke, D. Kroening, N. Sharygina, and K. Yorav. Predicate abstraction of ANSI-C programs using SAT. Formal Methods Syst. Design, 25(2-3):105–127, 2004.
[142]  E. M. Clarke, D. Kroening, N. Sharygina, and K. Yorav. SATABS: SAT-based predicate abstraction for ANSI-C. In N. Halbwachs and L. D. Zuck, editors, Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 3440 of Lecture Notes in Computer Science, pages 570–574. Springer, 2005.
[143]  E. M. Clarke, D. E. Long, and K. L. McMillan. A language for compositional specification and verification of finite state hardware controllers. In J. A. Darringer and F. J. Rammig, editors, Computer Hardware Description Languages and Their Applications, pages 281–295. North-Holland, 1989.
[144]  E. M. Clarke and B. H. Schlingloff. Model checking. In J. Robinson and A. Voronkov, editors, Handbook of Automated Reasoning, pages 1635–1790. Elsevier and MIT Press, 2001.
[145]  E. M. Clarke, M. Talupur, and H. Veith. Environment abstraction for parameterized verification. In Verification, Model Checking, and Abstract Interpretation, VMCAI, volume 3855 of Lecture Notes in Computer Science, pages 126–141. Springer, 2006.
[146]  R. Cleaveland. Tableau-based model checking in the propositional mu-calculus. Acta Inf., 27(8):725–747, 1990.
[147]   R. Cleaveland, M. Klein, and B. Steffen. Faster model checking for the modal mu-calculus. In Bochmann and Probst [69], pages 410–422.
[148]   R. Cleaveland, J. Parrow, and B. Steffen. The concurrency workbench. In Sifakis [452], pages 24–37.
[149]  R. Cleaveland and B. Steffen. A linear-time model-checking algorithm for the alternation-free modal mu-calculus. Formal Methods Syst. Design, 2(2):121–147, 1993.
[150]  R. W. Cleaveland, P. Lewis, S. Smolka, and O. Sokolsky. The concurrency factory: A development environment for concurrent systems. In R. Alur and T. A. Henzinger, editors, Computer Aided Verification, CAV, volume 1102 of Lecture Notes in Computer Science, pages 398–401. Springer, 1996.
[151]  R. W. Cleaveland and S. Sims. The NCSU concurrency workbench. In R. Alur and T. A. Henzinger, editors, Computer Aided Verification, CAV, volume 1102 of Lecture Notes in Computer Science, pages 394–397. Springer, 1996.
[152]  P. Clements, C. Heitmeyer, G. Labaw, and A. Rose. MT: A toolset for specifying and analyzing real-time systems. In Real-Time Systems Symposium, RTSS, pages 12–22. IEEE Computer Society, 1993.
[153]  J. M. Cobleigh, D. Giannakopoulou, and C. S. Pasareanu. Learning assumptions for compositional verification. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 2619 of Lecture Notes in Computer Science, pages 331–346. Springer, 2003.
[154]  S. Conchon, A. Goel, S. Krstic, A. Mebsout, and F. Zaïdi. Cubicle: A parallel SMT-based model checker for parameterized systems. In Computer Aided Verification, CAV, volume 7358 of Lecture Notes in Computer Science, pages 718–724. Springer, 2012.
[155]   B. Cook, D. Kroening, P. Rümmer, and C. M. Wintersteiger. Ranking function synthesis for bit-vector relations. Formal Methods Syst. Design, 43(1):93–120, 2013.
[156]  B. Cook, A. Podelski, and A. Rybalchenko. Termination proofs for systems code. In M. I. Schwartzbach and T. Ball, editors, Programming Language Design and Implementation, PLDI, pages 415–426. ACM, 2006.
[157]  T. H. Corman, C. E. Leiserson, and R. L. Rivest. Introduction to Algorithms. McGraw Hill, 1989.
[158]  O. Coudert, C. Berthet, and J. C. Madre. Verification of synchronous sequential machines based on symbolic execution. In Sifakis [452], pages 365–373.
[159]  O. Coudert, J. C. Madre, and C. Berthet. Verifying temporal properties of sequential machines without building their state diagrams. In Kurshan and Clarke [332], pages 23–32.
[160]  C. Courcoubetis, editor. Computer Aided Verification, CAV, volume 697 of Lecture Notes in Computer Science. Springer, 1993.
[161]  C. Courcoubetis, M. Y. Vardi, P. Wolper, and M. Yannakakis. Memory efficient algorithms for the verification of temporal properties. Formal Methods Syst. Design, 1:275–288, 1992.
[162]  P. Cousot. Abstract interpretation. ACM Comput. Surv., 28:324–328, 1996.
[163]  P. Cousot and R. Cousot. Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints. In Principles of Programming Languages, POPL, pages 238–252. ACM, 1977.
[164]  W. Craig. Linear reasoning: A new form of the Herbrand-Gentzen theorem. J. Symbolic Logic, 22(3):250–268, 1957.
[165]  D. W. Currie, A. J. Hu, and S. P. Rajan. Automatic formal verification of DSP software. In Design Automation Conference, DAC, pages 130–135. ACM, 2000.
[166]  D. Dams, R. Gerth, and O. Grumberg. Generation of reduced models for checking fragments of CTL. In Computer Aided Verification, CAV, volume 697 of Lecture Notes in Computer Science, pages 479–490. Springer, 1993.
[167]  D. Dams, R. Gerth, and O. Grumberg. Abstract interpretation of reactive systems. ACM Trans. Progr. Lang. Syst., 19(2):253–291, 1997.
[168]  C. David, D. Kroening, and M. Lewis. Unrestricted termination and non-termination arguments for bit-vector programs. In J. Vitek, editor, Programming Languages and Systems, 24th European Symposium on Programming, ESOP, volume 9032 of Lecture Notes in Computer Science, pages 183–204. Springer, 2015.
[169]  M. Davis, G. Logemann, and D. W. Loveland. A machine program for theorem-proving. Commun. ACM, 5(7):394–397, 1962.
[170]  M. Davis and H. Putnam. A computing procedure for quantification theory. J. ACM, 7(3):201–215, 1960.
[171]  C. Daws, A. Olivero, S. Tripakis, and S. Yovine. The tool KRONOS. In Hybrid Systems III: Verification and Control, volume 1066 of Lecture Notes in Computer Science, pages 208–219. Springer, 1996.
[172]  C. Daws and S. Yovine. Two examples of verification of multirate timed automata with KRONOS. In Real-Time Systems Symposium, RTSS, pages 66–75. IEEE Computer Society Press, 1995.
[173]  J. W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors. Proceedings of the REX Workshop on Stepwise Refinement of Distributed Systems, Models, Formalisms, Correctness, volume 430 of Lecture Notes in Computer Science. Springer, 1989.
[174]  L. M. de Moura and N. Bjørner. Z3: An efficient SMT solver. In C. R. Ramakrishnan and J. Rehof, editors, Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 4963 of Lecture Notes in Computer Science, pages 337–340. Springer, 2008.
[175]  R. De Nicola. Extensional equivalences for transition systems. Acta Inf., 24(2):211–237, 1987.
[176]  R. De Nicola and F. W. Vaandrager. Three logics for branching bisimulation. J. ACM, 42(2):458–487, 1995.
[177]  P. Della Vigna and C. Ghezzi. Context-free graph grammars. Inf. Control, 37:207–233, 1978.
[178]  G. Delzanno. Constraint-based verification of parameterized cache coherence protocols. Formal Methods Syst. Design, 23(3):257–301, 2003.
[179]  G. Delzanno, A. Sangnier, and R. Traverso. Parameterized verification of broadcast networks of register automata. In Reachability Problems, RP, volume 8169 of Lecture Notes in Computer Science, pages 109–121. Springer, 2013.
[180]  G. Delzanno, A. Sangnier, and R. Traverso. Adding data registers to parameterized networks with broadcast. Fundam. Inf., 143(3-4):287–316, 2016.
[181]  G. Delzanno, A. Sangnier, R. Traverso, and G. Zavattaro. On the complexity of parameterized reachability in reconfigurable broadcast networks. In Foundations of Software Technology and Theoretical Computer Science, FSTTCS, volume 18 of Leibniz International Proceedings in Informatics, pages 289–300. Schloss Dagstuhl – Leibniz-Zentrum fuer Informatik, 2012.
[182]  S. Demri and P. Gastin. Specification and verification using temporal logics. In Modern Applications of Automata Theory, volume 2 of IISc Research Monographs, pages 457–494. World Scientific, 2012.
[183]  S. Demri, V. Goranko, and M. Lange. Temporal Logics in Computer Science: Finite-State Systems. Cambridge University Press, 2016.
[184]  E. W. Dijkstra. Guarded commands, nondeterminacy and formal derivation of programs. Commun. ACM, 18(8):453–457, 1975.
[185]  D. L. Dill. Timing assumptions and verification of finite-state concurrent systems. In J. Sifakis, editor, Automatic Verification Methods for Finite State Systems, volume 407 of Lecture Notes in Computer Science, pages 197–212. Springer, 1989.
[186]  D. L. Dill, editor. Computer Aided Verification, CAV, volume 818 of Lecture Notes in Computer Science. Springer, 1994.
[187]  D. L. Dill and E. M. Clarke. Automatic verification of asynchronous circuits using temporal logic. IEE Proceedings E, 133(5):276–282, 1986.
[188]  D. Dolev, M. Klawe, and M. Rodeh. An O ( n log n ) unidirectional distributed algorithm for extrema finding in a circle. J. Algorithms, 3:245–260, 1982.
[189]  A. F. Donaldson, L. Haller, D. Kroening, and P. Rümmer. Software verification using k-induction. In E. Yahav, editor, Static Analysis, SAS, volume 6887 of Lecture Notes in Computer Science, pages 351–368. Springer, 2011.
[190]  A. F. Donaldson, A. Kaiser, D. Kroening, and T. Wahl. Symmetry-aware predicate abstraction for shared-variable concurrent programs. In Computer Aided Verification, CAV, volume 6806 of Lecture Notes in Computer Science, pages 356–371. Springer, 2011.
[191]  A. F. Donaldson, D. Kroening, and P. Rümmer. Automatic analysis of scratch-pad memory code for heterogeneous multicore processors. In J. Esparza and R. Majumdar, editors, Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 6015 of Lecture Notes in Computer Science, pages 280–295. Springer, 2010.
[192]  V. D’Silva, D. Kroening, M. Purandare, and G. Weissenbacher. Interpolant strength. In G. Barthe and M. V. Hermenegildo, editors, Verification, Model Checking, and Abstract Interpretation, VMCAI, volume 5944 of Lecture Notes in Computer Science, pages 129–145. Springer, 2010.
[193]  N. Eén and A. Biere. Effective preprocessing in SAT through variable and clause elimination. In F. Bacchus and T. Walsh, editors, Theory and Applications of Satisfiability Testing, SAT, volume 3569 of Lecture Notes in Computer Science, pages 61–75. Springer, 2005.
[194]  N. Eén, A. Mishchenko, and N. Amla. A single-instance incremental SAT formulation of proof-and counterexample-based abstraction. In R. Bloem and N. Sharygina, editors, Proceedings of 10th International Conference on Formal Methods in Computer-Aided Design, FMCAD, pages 181–188. IEEE, 2010.
[195]  N. Eén and N. Sörensson. Temporal induction by incremental SAT solving. Electr. Notes Theor. Comput. Sci., 89(4):543–560, 2003.
[196]  N. Eén and N. Sörensson. An extensible SAT-solver. In E. Giunchiglia and A. Tacchella, editors, Theory and Applications of Satisfiability Testing, SAT, volume 2919 of Lecture Notes in Computer Science, pages 502–518. Springer, 2004.
[197]  C. Eisner and D. Fisman. A Practical Introduction to PSL. Springer, 2006.
[198]  K. A. Elkader, O. Grumberg, C. S. Pasareanu, and S. Shoham. Automated circular assume-guarantee reasoning. In Formal Methods, FM, volume 9109 of Lecture Notes in Computer Science, pages 23–39. Springer, 2015.
[199]  K. A. Elkader, O. Grumberg, C. S. Pasareanu, and S. Shoham. Automated circular assume-guarantee reasoning with N-way decomposition and alphabet refinement. In Computer Aided Verification, CAV, volume 9779 of Lecture Notes in Computer Science, pages 329–351. Springer, 2016.
[200]  E. Elkind, B. Genest, D. A. Peled, and H. Qu. Grey-box checking. In Formal Techniques for Networked and Distributed Systems, FORTE, volume 4229 of Lecture Notes in Computer Science, pages 420–435. Springer, 2006.
[201]  E. A. Emerson. Branching Time Temporal Logic and the Design of Correct Concurrent Programs. PhD thesis, Harvard University, 1981.
[202]  E. A. Emerson. Temporal and modal logic. In J. V. Leeuwen, editor, Handbook of Theoretical Computer Science, volume B, pages 997–1072. Elsevier and MIT Press, 1990.
[203]  E. A. Emerson and E. M. Clarke. Characterizing correctness properties of parallel programs using fixpoints. In Automata, Languages and Programming, 7th Colloquium, volume 85 of Lecture Notes in Computer Science, pages 169–181. Springer, 1980.
[204]  E. A. Emerson and J. Y. Halpern. “Sometimes” and “Not Never” revisited: On branching time versus linear time. J. ACM, 33(1):151–178, 1986.
[205]  E. A. Emerson, S. Jha, and D. A. Peled. Combining partial order and symmetry reductions. In Tools and Algorithms for Construction and Analysis of Systems, TACAS, volume 1217 of Lecture Notes in Computer Science, pages 19–34. Springer, 1997.
[206]  E. A. Emerson, C. S. Jutla, and A. P. Sistla. On model-checking for fragments of μ calculus. In C. Courcoubetis, editor, Computer Aided Verification, CAV, volume 697 of Lecture Notes in Computer Science, pages 385–396. Springer, 1993.
[207]  E. A. Emerson and V. Kahlon. Reducing model checking of the many to the few. In Conference on Automated Deduction, CADE, volume 1831 of Lecture Notes in Computer Science, pages 236–254. Springer, 2000.
[208]  E. A. Emerson and V. Kahlon. Parameterized model checking of ring-based message passing systems. In Computer Science Logic, CSL, volume 3210 of Lecture Notes in Computer Science, pages 325–339. Springer, 2004.
[209]  E. A. Emerson and C.-L. Lei. Modalities for model checking: Branching time strikes back. In M. S. V. Deusen, Z. Galil, and B. K. Reid, editors, Twelfth Symposium on Principles of Programming Languages, pages 84–96. ACM Press, 1985.
[210]  E. A. Emerson and C.-L. Lei. Efficient model checking in fragments of the propositional mu-calculus. In Logic in Computer Science, LICS, pages 267–278. IEEE Computer Society, 1986.
[211]  E. A. Emerson, A. K. Mok, A. P. Sistla, and J. Srinivasen. Quantitative temporal reasoning. In Kurshan and Clarke [332], pages 136–145.
[212]  E. A. Emerson and K. S. Namjoshi. Reasoning about rings. In Principles of Programming Languages, POPL, pages 85–94. ACM, 1995.
[213]  E. A. Emerson and K. S. Namjoshi. Automatic verification of parameterized synchronous systems. In R. Alur and T. A. Henzinger, editors, Computer Aided Verification, CAV, volume 1102 of Lecture Notes in Computer Science, pages 87–98. Springer, 1996.
[214]  E. A. Emerson and K. S. Namjoshi. On model checking for non-deterministic infinite-state systems. In Logic in Computer Science, LICS, pages 70–80. IEEE Computer Society, 1998.
[215]  E. A. Emerson and K. S. Namjoshi. Verification of parameterized bus arbitration protocol. In Computer Aided Verification, CAV, volume 1427 of Lecture Notes in Computer Science, pages 452–463. Springer, 1998.
[216]  E. A. Emerson and A. P. Sistla. Symmetry and model checking. In Courcoubetis [160], pages 463–478.
[217]  E. A. Emerson and A. P. Sistla. Utilizing symmetry when model checking under fairness assumptions: An automata-theoretic approach. In Computer Aided Verification, CAV, volume 939 of Lecture Notes in Computer Science, pages 309–324. Springer, 1995.
[218]  E. A. Emerson and R. J. Trefler. Model checking real-time properties of symmetric systems. In L. Brim, J. Gruska, and J. Zlatuska, editors, Mathematical Foundations of Computer Science, MFCS, volume 1450 of Lecture Notes in Computer Science, pages 427–436. Springer, 1998.
[219]  E. A. Emerson and R. J. Trefler. From asymmetry to full symmetry: New techniques for symmetry reduction in model checking. In Correct Hardware Design and Verification Methods, CHARME, volume 1703 of Lecture Notes in Computer Science, pages 142–156. Springer, 1999.
[220]  J. Esparza. Keeping a crowd safe: On the complexity of parameterized verification (invited talk). In E. W. Mayr and N. Portier, editors, Symposium on Theoretical Aspects of Computer Science, STACS, volume 25 of LIPIcs, pages 1–10. Schloss Dagstuhl – Leibniz-Zentrum fuer Informatik, 2014.
[221]  J. Esparza, A. Finkel, and R. Mayr. On the verification of broadcast protocols. In Logic in Computer Science, LICS, pages 352–359. IEEE Computer Society, 1999.
[222]  J. Esparza, P. Ganty, J. Leroux, and R. Majumdar. Verification of population protocols. Acta Inf., 54(2):191–215, 2017.
[223]  J. Esparza, P. Ganty, and R. Majumdar. Parameterized verification of asynchronous shared-memory systems. J. ACM, 63(1):10:1–10:48, 2016.
[224]  J. Esparza and K. Heljanko. Unfoldings—A Partial-Order Approach to Model Checking. Springer, 2008.
[225]  J. C. Fernandez, C. Jard, T. Jeron, and G. Viho. Using on-the-fly verification techniques for the generation of test suites. In R. Alur and T. A. Henzinger, editors, Computer Aided Verification, CAV, volume 1102 of Lecture Notes in Computer Science, pages 348–359. Springer, 1996.
[226]  A. Finkel and J. Leroux. Recent and simple algorithms for Petri nets. Softw. Syst. Model., 14(2):719–725, 2015.
[227]  A. Finkel and P. Schnoebelen. Well-structured transition systems everywhere! Theor. Comput. Sci., 256(1-2):63–92, 2001.
[228]  C. Flanagan and P. Godefroid. Dynamic partial-order reduction for model checking software. In Principles of Programming Languages, POPL, pages 110–121. ACM, 2005.
[229]  S. Fogarty, O. Kupferman, M. Vardi, and T. Wilke. Unifying Büchi complementation constructions. In Annual Conference of the European Association for Computer Science Logic, volume 12 of Leibniz International Proceedings in Informatics, pages 248–263. Schloss Dagstuhl – Leibniz-Zentrum fuer Informatik, 2011.
[230]  N. Francez. The Analysis of Cyclic Programs. PhD thesis, Weizmann Institute of Science, 1976.
[231]  A. N. Fredette and R. W. Cleaveland. RTSL: A language for real-time schedulability analysis. In Real-Time Systems Symposium, RTSS, pages 274–283. IEEE Computer Society, 1993.
[232]  M. Fujita, H. Fujisawa, and N. Kawato. Evaluation and improvements of Boolean comparison method based on binary decision diagrams. In International Conference on Computer-Aided Design, ICCAD, pages 2–5. IEEE Computer Society Press, 1988.
[233]  M. Fujita, H. Tanaka, and T. Moto-oka. Logic design assistance with temporal logic. In Conference on Hardware Description Languages and Their Applications, CHDL, pages 129–137, 1985.
[234]  D. Gabbay, A. Pnueli, S. Shelah, and J. Stavi. On the temporal analysis of fairness. In Principles of Programming Languages, POPL, pages 163–173. ACM, 1980.
[235]  M. K. Ganai, P. Ashar, A. Gupta, L. Zhang, and S. Malik. Combining strengths of circuit-based and CNF-based algorithms for a high-performance SAT solver. In Design Automation Conference, DAC, pages 747–750. ACM, 2002.
[236]  P. Ganty, J. Raskin, and L. V. Begin. From many places to few: Automatic abstraction refinement for Petri nets. Fundam. Inf., 88(3):275–305, 2008.
[237]  M. R. Garey and D. S. Johnson. Computers and Intractability: A Guide to the Theory of NP-Completeness. Freeman, 1979.
[238]  P. Gastin and D. Oddoux. Fast LTL to Büchi automata translation. In Computer Aided Verification, CAV, volume 2102 of Lecture Notes in Computer Science, pages 53–65. Springer, 2001.
[239]  G. Geeraerts, J. Raskin, and L. V. Begin. On the efficient computation of the minimal coverability set for Petri nets. In K. S. Namjoshi, T. Yoneda, T. Higashino, and Y. Okamura, editors, Automated Technology for Verification and Analysis, volume 4762 of Lecture Notes in Computer Science, pages 98–113. Springer, 2007.
[240]  D. Geist and I. Beer. Efficient model checking by automated ordering of transition relation partitions. In Computer Aided Verification, CAV, volume 818 of Lecture Notes in Computer Science, pages 299–310. Springer, 1994.
[241]  R. Gerber and I. Lee. CCSR: A calculus for communicating shared resources. In Theories of Concurrency: Unification and Extension, CONCUR, volume 458 of Lecture Notes in Computer Science, pages 263–277. Springer, 1990.
[242]  S. M. German and A. P. Sistla. Reasoning about systems with many processes. J. ACM, 39(3):675–735, 1992.
[243]  R. Gerth, R. Kuiper, D. Peled, and W. Penczek. A partial order approach to branching time logic model checking. In Israel Symposium on the Theory of Computing and Systems, ISTCS, pages 130–140. IEEE Computer Society Press, 1995.
[244]  R. Gerth, D. Peled, M. Y. Vardi, and P. Wolper. Simple on-the-fly automatic verification of linear temporal logic. In Protocol Specification Testing and Verification, pages 3–18. Chapman and Hall, 1995.
[245]  D. Giannakopoulou, C. S. Pasareanu, and H. Barringer. Assumption generation for software component verification. In Automated Software Engineering, ASE, pages 3–12. IEEE Computer Society, 2002.
[246]  P. Godefroid. Using partial orders to improve automatic verification methods. In Computer Aided Verification, CAV, volume 531 of Lecture Notes in Computer Science, pages 176–185. Springer, 1990.
[247]  P. Godefroid, J. de Halleux, A. V. Nori, S. K. Rajamani, W. Schulte, N. Tillmann, and M. Y. Levin. Automating software testing using program analysis. IEEE Softw., 25(5):30–37, 2008.
[248]  P. Godefroid, N. Klarlund, and K. Sen. DART: Directed automated random testing. In V. Sarkar and M. W. Hall, editors, Programming Language Design and Implementation, PLDI, pages 213–223. ACM, 2005.
[249]  P. Godefroid and D. Pirottin. Refining dependencies improves partial-order verification methods. In Computer Aided Verification, CAV, volume 697 of Lecture Notes in Computer Science, pages 438–449. Springer, 1993.
[250]  E. Goldberg and Y. Novikov. BerkMin: A fast and robust Sat-solver. In Design, Automation and Test in Europe Conference and Exposition, DATE, pages 142–149. IEEE Computer Society, 2002.
[251]  G. Gopalakrishnan and S. Qadeer, editors. Computer Aided Verification, CAV, volume 6806 of Lecture Notes in Computer Science. Springer, 2011.
[252]  S. Graf and H. Saïdi. Construction of abstract state graphs with PVS. In O. Grumberg, editor, Computer Aided Verification, CAV, volume 1254 of Lecture Notes in Computer Science, pages 72–83. Springer, 1997.
[253]  S. Graf and B. Steffen. Compositional minimization of finite state processes. In Kurshan and Clarke [332], pages 186–196.
[254]  A. Groce, D. A. Peled, and M. Yannakakis. Adaptive model checking. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 2280 of Lecture Notes in Computer Science, pages 357–370. Springer, 2002.
[255]  O. Grumberg and D. E. Long. Model checking and modular verification. ACM Trans. Progr. Lang. Syst., 16:843–872, 1994.
[256]  E. L. Gunter and D. A. Peled. Path exploration tool. In Tools and Algorithms for Construction and Analysis of Systems, TACAS, volume 1579 of Lecture Notes in Computer Science, pages 405–419. Springer, 1999.
[257]  E. L. Gunter and D. A. Peled. Model checking, testing and verification working together. Formal Asp. Comput., 17(2):201–221, 2005.
[258]  A. Gupta, K. L. McMillan, and Z. Fu. Automated assumption generation for compositional verification. Formal Methods Syst. Design, 32(3):285–301, 2008.
[259]  T. Hafer and W. Thomas. Computation tree logic CTL ⋆ and path quantifiers in the monadic theory of the binary tree. In International Colloquium on Automata, Languages, and Programming, ICALP, volume 267 of Lecture Notes in Computer Science, pages 269–279. Springer, 1987.
[260]  N. Halbwachs, Y. E. Proy, and P. Roumanoff. Verification of real-time systems using linear relation analysis. Formal Methods Syst. Design, 11(2):157–185, 1997.
[261]  J. Y. Halpern. Reasoning about Uncertainty. MIT Press, 2005.
[262]  M. G. Harbour, M. H. Klein, and J. P. Lehoczky. Timing analysis for fixed-priority scheduling of hard real-time systems. IEEE Trans. Software Engineering, 20(1):13–28, 1994.
[263]  R. Hardin, Z. Har’El, and R. P. Kurshan. COSPAN. In R. Alur and T. A. Henzinger, editors, Computer Aided Verification, CAV, volume 1102 of Lecture Notes in Computer Science, pages 423–427. Springer, 1996.
[264]  D. Harel. First-Order Dynamic Logic, volume 68 of Lecture Notes in Computer Science. Springer, 1979.
[265]  Z. Har’El and R. P. Kurshan. Software for analytical development of communications protocols. AT&T Tech. J., 69(1):45–59, 1990.
[266]  Z. Hassan, A. R. Bradley, and F. Somenzi. Incremental, inductive CTL model checking. In P. Madhusudan and S. A. Seshia, editors, Computer Aided Verification, CAV, volume 7358 of Lecture Notes in Computer Science, pages 532–547. Springer, 2012.
[267]  Z. Hassan, A. R. Bradley, and F. Somenzi. Better generalization in IC3. In Formal Methods in Computer-Aided Design, FMCAD, pages 157–164. IEEE, 2013.
[268]  M. Hennessy and R. Milner. Algebraic laws for nondeterminism and concurrency. J. ACM, 32(1):137–161, 1985.
[269]  M. Henzinger, T. A. Henzinger, and P. Kopke. Computing simulations on finite and infinite graphs. In Foundations of Computer Science, FOCS, pages 453–462. IEEE Computer Society Press, 1995.
[270]  T. A. Henzinger, R. Jhala, R. Majumdar, and K. L. McMillan. Abstractions from proofs. In N. D. Jones and X. Leroy, editors, Principles of Programming Languages, POPL, pages 232–244. ACM, 2004.
[271]  T. A. Henzinger, R. Jhala, R. Majumdar, and G. Sutre. Lazy abstraction. In Principles of Programming Languages, POPL, pages 58–70. ACM Press, 2002.
[272]  T. A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. Symbolic model checking for real-time systems. Inf. Comput., 111(2):193–244, 1994.
[273]  M. Heule and H. van Maaren. Look-ahead based SAT solvers. In Handbook of Satisfiability, volume 185 of Frontiers in Artificial Intelligence and Applications, pages 155–184. IOS Press, 2009.
[274]  C. A. R. Hoare. Communicating Sequential Processes. Prentice-Hall, 1985.
[275]  G. Holzmann. The model checker SPIN. IEEE Trans. Software Engineering, 23(5):279–295, 1997.
[276]  G. J. Holzmann. Design and Validation of Computer Protocols. Prentice-Hall, 1991.
[277]  G. J. Holzmann, P. Godefroid, and D. Pirottin. Coverage preserving reduction strategies for reachability analysis. In Protocol Specification, Testing and Verification, pages 349–363. North-Holland, 1992.
[278]  G. J. Holzmann and D. Peled. An improvement in formal verification. In Formal Description Techniques, pages 197–211. Chapman and Hall, 1994.
[279]  G. J. Holzmann and D. Peled. The state of SPIN. In Computer Aided Verification, CAV, volume 1102 of Lecture Notes in Computer Science, pages 385–389. Springer, 1996.
[280]  G. J. Holzmann, D. Peled, and M. Yannakakis. On nested depth first search. In Second SPIN Workshop, pages 23–32. AMS, 1996.
[281]  J. N. Hooker. Solving the incremental satisfiability problem. J. Logic Progr., 15(1–2):177–186, 1993.
[282]  J. E. Hopcroft and J. D. Ullman. Introduction to Automata Theory, Languages, and Computation. Addison-Wesley, 1979.
[283]  F. Howar and B. Steffen. Learning models for verification and testing. In Leveraging Applications of Formal Methods, Verification and Validation, ISoLA, volume 8802 of Lecture Notes in Computer Science, pages 199–201. Springer, 2014.
[284]  G. Huang. Constructing Craig interpolation formulas. In Computing and Combinatorics, COCOON, volume 959 of Lecture Notes in Computer Science, pages 181–190. Springer, 1995.
[285]  P. Huber, A. M. Jensen, L. O. Jepsen, and K. Jensen. Towards reachability trees for high-level Petri nets. In Advances in Petri Nets 1984, European Workshop on Applications and Theory in Petri Nets, volume 188 of Lecture Notes in Computer Science, pages 215–233. Springer, 1984.
[286]  G. Hughes and M. Cresswell. A New Introduction to Modal Logic. Routledge, 1996.
[287]  G. E. Hughes and M. J. Creswell. Introduction to Modal Logic. Methuen, 1977.
[288]  IEEE Computer Society. IEEE Standard for Futurebus+—Logical Protocol Specification, 1992. IEEE Standard 896.1–1991.
[289]  C. W. Ip and D. L. Dill. Better verification through symmetry. In L. Claesen, editor, Computer Hardware Description Languages and Their Applications, CHDL, pages 97–111. North-Holland, 1993.
[290]  M. Isberner, F. Howar, and B. Steffen. The TTT algorithm: A redundancy-free approach to active automata learning. In Runtime Verification, RV, volume 8734 of Lecture Notes in Computer Science, pages 307–322. Springer, 2014.
[291]  H. Jain, C. Bartzis, and E. M. Clarke. Satisfiability checking of non-clausal formulas using general matings. In A. Biere and C. P. Gomes, editors, Theory and Applications of Satisfiability Testing, SAT, volume 4121 of Lecture Notes in Computer Science, pages 75–89. Springer, 2006.
[292]  H. Jain, F. Ivancic, A. Gupta, I. Shlyakhter, and C. Wang. Using statically computed invariants inside the predicate abstraction and refinement loop. In T. Ball and R. B. Jones, editors, Computer Aided Verification, CAV, volume 4144 of Lecture Notes in Computer Science, pages 137–151. Springer, 2006.
[293]  H. Jain, D. Kroening, N. Sharygina, and E. M. Clarke. Word-level predicate-abstraction and refinement techniques for verifying RTL Verilog. IEEE Trans. CAD Integr. Circuits Syst., 27(2):366–379, 2008.
[294]  R. Jhala and K. L. McMillan. Array abstractions from proofs. In Computer Aided Verification, CAV, volume 4590 of Lecture Notes in Computer Science, pages 193–206. Springer, 2007.
[295]  C. B. Jones. Specification and design of (parallel) programs. In Proceedings of IFIP’83, pages 321–332. North-Holland, 1983.
[296]  B. Josko. Verifying the correctness of AADL-modules using model checking. In de Bakker et al. [173], pages 386–400.
[297]  D. Jovanovic and B. Dutertre. Property-directed k-induction. In Formal Methods in Computer-Aided Design, FMCAD, pages 85–92. IEEE, 2016.
[298]  J. J. Joyce and C. H. Seger. The HOL-Voss system: Model-checking inside a general-purpose theorem-prover. In Higher Order Logic Theorem Proving and its Applications, HUG, volume 780 of Lecture Notes in Computer Science, pages 185–198. Springer, 1994.
[299]  M. Jurdzinski, M. Paterson, and U. Zwick. A deterministic subexponential algorithm for solving parity games. SIAM J. Comput., 38(4):1519–1532, 2008.
[300]  V. Kahlon. Parameterization as abstraction: A tractable approach to the dataflow analysis of concurrent programs. In Logic in Computer Science, LICS, pages 181–192. IEEE Computer Society, 2008.
[301]  A. Kaiser, D. Kroening, and T. Wahl. Efficient coverability analysis by proof minimization. In M. Koutny and I. Ulidowski, editors, Concurrency Theory, CONCUR, volume 7454 of Lecture Notes in Computer Science, pages 500–515. Springer, 2012.
[302]  A. Kaiser, D. Kroening, and T. Wahl. A widening approach to multithreaded program verification. ACM Trans. Progr. Lang. Syst., 36(4):14:1–14:29, 2014.
[303]  A. Kaiser, D. Kroening, and T. Wahl. Lost in abstraction: Monotonicity in multi-threaded programs. Inf. Comput., 252:30–47, 2017.
[304]  M. Kaminski. A branching time logic with past operators. J. Comput. Syst. Sci., 49(2):223–246, 1994.
[305]  S. Katz. Techniques for increasing coverage of formal verification. Master’s thesis, Department of Computer Science, Technion – Israel Institute of Technology, 2001.
[306]  S. Katz and D. A. Peled. An efficient verification method for parallel and distributed programs. In Workshop on Linear Time, Branching Time and Partial Order in Logics and Models for Concurrency, volume 354 of Lecture Notes in Computer Science, pages 489–507. Springer, 1988.
[307]  S. Katz and D. A. Peled. Defining conditional independence using collapses. Theor. Comput. Sci., 101(2):337–359, 1992.
[308]  B. W. Kernighan and D. M. Ritchie. The C Programming Language. Prentice-Hall, 1978.
[309]  Y. Kesten, O. Maler, M. Marcus, A. Pnueli, and E. Shahar. Symbolic model checking with rich assertional laguages. In O. Grumberg, editor, Computer Aided Verification, CAV, volume 1254 of Lecture Notes in Computer Science, pages 424–435. Springer, 1997.
[310]  S. Khurshid, C. S. Pasareanu, and W. Visser. Generalized symbolic execution for model checking and testing. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 2619 of Lecture Notes in Computer Science, pages 553–568. Springer, 2003.
[311]  J. C. King. A new approach to program testing. In C. Hackl, editor, Programming Methodology, volume 23 of Lecture Notes in Computer Science, pages 278–290. Springer, 1975.
[312]  N. Klarlund. Progress measures for complementation of ω automata with applications to temporal logic. In Foundations of Computer Science, FOCS, pages 358–367. IEEE, 1991.
[313]  D. E. Knuth. The Art of Computer Programming: Fascicle 6 Volume 4B: Satisfiability. Addison Wesley, 2015.
[314]  D. Kozen. Lower bounds for natural proof systems. In Foundations of Computer Science, FOCS, pages 254–266. IEEE, 1977.
[315]  D. Kozen. Results on the propositional μ calculus. Theor. Comput. Sci., 27:333–354, 1983.
[316]  J. Krajíček. Interpolation theorems, lower bounds for proof systems, and independence results for bounded arithmetic. J. Symbolic Logic, 62(2):457–486, 1997.
[317]  D. Kroening, J. Ouaknine, O. Strichman, T. Wahl, and J. Worrell. Linear completeness thresholds for bounded model checking. In G. Gopalakrishnan and S. Qadeer, editors, Computer Aided Verification, CAV, volume 6806 of Lecture Notes in Computer Science, pages 557–572. Springer, 2011.
[318]  D. Kroening and O. Strichman. Efficient computation of recurrence diameters. In L. D. Zuck, P. C. Attie, A. Cortesi, and S. Mukhopadhyay, editors, Verification, Model Checking, and Abstract Interpretation, VMCAI, volume 2575 of Lecture Notes in Computer Science, pages 298–309. Springer, 2003.
[319]  D. Kroening and G. Weissenbacher. Interpolation-based software verification with Wolverine. In Gopalakrishnan and Qadeer [251], pages 573–578.
[320]  F. Kröger. LAR: A logic of algorithmic reasoning. Acta Inf., 8(3):243–266, 1977.
[321]  O. Kullmann. Fundaments of branching heuristics. In Handbook of Satisfiability, volume 185 of Frontiers in Artificial Intelligence and Applications, pages 205–244. IOS Press, 2009.
[322]  O. Kupferman and O. Grumberg. Branching-time temporal logic and tree automata. Inf. Comput., 125(1):62–69, 1996.
[323]  O. Kupferman and A. Pnueli. Once and for all. In Logic in Computer Science, LICS, pages 25–35. IEEE, 1995.
[324]  O. Kupferman and M. Vardi. Weak alternating automata are not that weak. ACM Trans. Computational Logic, 2(2):408–429, 2001.
[325]   O. Kupferman and M. Y. Vardi. Verification of fair transition systems. In R. Alur and T. A. Henzinger, editors, Computer Aided Verification, CAV, volume 1102 of Lecture Notes in Computer Science, pages 372–382. Springer, 1996.
[326]  O. Kupferman and M. Y. Vardi. Model checking of safety properties. Formal Methods Syst. Design, 19(3):291–314, 2001.
[327]  O. Kupferman, M. Y. Vardi, and P. Wolper. An automata-theoretic approach to branching-time model checking. J. ACM, 47(2):312–360, 2000.
[328]  R. Kurshan. Complementing deterministic Büchi automata in polynomial time. Journal of Computer and Systems Science, 35:59–71, 1987.
[329]  R. P. Kurshan. Analysis of discrete event coordination. In de Bakker et al. [173], pages 414–453.
[330]   R. P. Kurshan. Computer-Aided Verification of Coordinating Processes: The Automata-Theoretic Approach. Princeton University Press, 1994.
[331]  R. P. Kurshan. Formal verification in a commercial setting. In Design Automation Conference, DAC, pages 258–262. ACM, 1997.
[332]  R. P. Kurshan and E. M. Clarke, editors. Computer Aided Verification, CAV, volume 531. Springer, 1990.
[333]  R. P. Kurshan, V. Levin, M. Minea, D. A. Peled, and H. Yenigün. Static partial order reduction. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 1384 of Lecture Notes in Computer Science, pages 345–357. Springer, 1998.
[334]   R. P. Kurshan and K. L. McMillan. A structural induction theorem for processes. In Principles of Distributed Computing, pages 239–247. ACM, 1989.
[335]  M. Z. Kwiatkowska, G. Norman, and D. Parker. Symmetry reduction for probabilistic model checking. In Computer Aided Verification, CAV, volume 4144 of Lecture Notes in Computer Science, pages 234–248. Springer, 2006.
[336]  M. Z. Kwiatkowska, G. Norman, and D. Parker. PRISM 4.0: Verification of probabilistic real-time systems. In Computer Aided Verification, CAV, volume 6806 of Lecture Notes in Computer Science, pages 585–591. Springer, 2011.
[337]  S. K. Lahiri, T. Ball, and B. Cook. Predicate abstraction via symbolic decision procedures. Logical Methods Comput. Sci., 3(2), 2007.
[338]  A. Lal and S. Qadeer. Powering the Static Driver Verifier using Corral. In S. Cheung, A. Orso, and M. D. Storey, editors, Foundations of Software Engineering, FSE, pages 202–212. ACM, 2014.
[339]  A. Lal, S. Qadeer, and S. K. Lahiri. A solver for reachability modulo theories. In P. Madhusudan and S. A. Seshia, editors, Computer Aided Verification, CAV, volume 7358 of Lecture Notes in Computer Science, pages 427–443. Springer, 2012.
[340]  L. Lamport. “Sometimes” is sometimes “Not Never”. In Principles of Programming Languages, POPL, pages 174–185. ACM Press, 1980.
[341]  L. Lamport. What good is temporal logic? In IFIP Congress, pages 657–668. Elsevier, 1983.
[342]  F. Laroussinie and P. Schnoebelen. Specification in CTL+past for verification in CTL. Inf. Comput., 156(1-2):236–263, 2000.
[343]  K. G. Larsen. Modal specifications. In Sifakis [452], pages 232–246.
[344]  K. G. Larsen. Efficient local correctness checking. In Bochmann and Probst [69], pages 30–43.
[345]  K. G. Larsen, P. Pettersson, and W. Yi. Compositional and symbolic model-checking of real-time systems. In Real-Time Systems Symposium, RTSS, pages 76–87. IEEE, 1995.
[346]  K. G. Larsen, P. Pettersson, and W. Yi. UPPAAL: Status & developments. In Computer Aided Verification, CAV, volume 1254 of Lecture Notes in Computer Science, pages 456–459. Springer, 1997.
[347]  T. Latvala, A. Biere, K. Heljanko, and T. A. Junttila. Simple bounded LTL model checking. In A. J. Hu and A. K. Martin, editors, Formal Methods in Computer-Aided Design, FMCAD, volume 3312 of Lecture Notes in Computer Science, pages 186–200. Springer, 2004.
[348]  R. Lazić, T. Newcomb, J. Ouaknine, A. W. Roscoe, and J. Worrell. Nets with tokens which carry data. Fundam. Inf., 88(3):251–274, 2008.
[349]  C. Y. Lee. Representation of switching circuits by binary-decision programs. Bell System Tech. J., 38:985–999, 1959.
[350]  D. Lee and M. Yannakakis. Online minimization of transition systems (extended abstract). In S. R. Kosaraju, M. Fellows, A. Wigderson, and J. A. Ellis, editors, Annual ACM Symposium on Theory of Computing, pages 264–274. ACM, 1992.
[351]  J. P. Lehoczky. Fixed priority scheduling of periodic task sets with arbitrary deadlines. In Real-Time Systems Symposium, RTSS, pages 201–209. IEEE Computer Society, 1990.
[352]  J. P. Lehoczky, L. Sha, J. K. Strosnider, and H. Tokuda. Fixed priority scheduling theory for hard real-time systems. In Foundations of Real-Time Computing—Scheduling and Resource Management, pages 1–30. Kluwer, 1991.
[353]  B. Li, C. Wang, and F. Somenzi. Abstraction refinement in symbolic model checking using satisfiability as the only decision procedure. STTT, 7(2):143–155, 2005.
[354]  O. Lichtenstein and A. Pnueli. Checking that finite state concurrent programs satisfy their linear specification. In Principles of Programming Languages, POPL, pages 97–107. ACM, 1985.
[355]  O. Lichtenstein, A. Pnueli, and L. Zuck. The glory of the past. In Logics of Programs, volume 193 of Lecture Notes in Computer Science, pages 196–218. Springer, 1985.
[356]   C. J. Lillieroth and S. Singh. Formal verification of FPGA cores. Nord. J. Comput., 6(3):299–319, 1999.
[357]  B. Lin and A. R. Newton. Efficient symbolic manipulation of equvialence relations and classes. In International Workshop on Formal Methods in VLSI Design, pages 46–61. ACM, 1991.
[358]  C. L. Liu and J. W. Layland. Scheduling algorithms for multiprogramming in a hard real-time environment. J. ACM, 20(1):46–61, 1973.
[359]  C. D. Locke, D. R. Vogel, and T. J. Mesler. Building a predictable avionics platform in Ada: A case study. In Real-Time Systems Symposium, RTSS, pages 181–189. IEEE, 1991.
[360]  C. Loiseaux, S. Graf, J. Sifakis, A. Bouajjani, and S. Bensalem. Property preserving abstractions for the verification of concurrent systems. Formal Methods Syst. Design, 6:11–45, 1995.
[361]  D. E. Long. Model Checking, Abstraction, and Compositional Reasoning. PhD thesis, Carnegie Mellon University, 1993.
[362]  D. E. Long, A. Browne, E. M. Clarke, S. Jha, and W. R. Marrero. An improved algorithm for the evaluation of fixpoint expressions. In Dill [186], pages 338–350.
[363]  S. MacLane and G. Birkhoff. Algebra. MacMillan, 1968.
[364]  A. Mader. Tableau recycling. In Bochmann and Probst [69], pages 330–342.
[365]  P. Maier. Compositional circular assume-guarantee rules cannot be sound and complete. In Foundations of Software Science and Computational Structures, FOSSACS, volume 2620 of Lecture Notes in Computer Science, pages 343–357. Springer, 2003.
[366]  Y. Malachi and S. S. Owicki. Temporal specifications of self-timed systems. In H. T. Kung, B. Sproull, and G. Steele, editors, VLSI Systems and Computations, pages 203–212. Springer, 1981.
[367]  S. Malik, A. Wang, R. Brayton, and A. Sangiovanni-Vincenteli. Logic verification using binary decision diagrams in a logic synthesis environment. In International Conference on Computer-Aided Design, pages 6–9. IEEE, 1988.
[368]  M. Mandrykin, V. Mutilin, E. Novikov, A. V. Khoroshilov, and P. Shved. Using Linux device drivers for static verification tools benchmarking. Prog. Comput. Softw., 38(5):245–256, 2012.
[369]  Z. Manna and A. Pnueli. The Temporal Logic of Reactive and Concurrent Systems: Specification. Springer, 1992.
[370]  Z. Manna and A. Pnueli. Temporal Verifications of Reactive Systems: Safety. Springer, 1995.
[371]  R. Marelly and O. Grumberg. GORMEL—Grammar ORiented ModEL checker. Technical Report 697, Technion, 1991.
[372]  J. P. Marques Silva and K. A. Sakallah. GRASP—a new search algorithm for satisfiability. In International Conference on Computer-Aided Design, ICCAD, pages 220–227. IEEE Computer Society, 1996.
[373]  O. Matthews, J. D. Bingham, and D. J. Sorin. Verifiable hierarchical protocols with network invariants on parametric systems. In Formal Methods in Computer-Aided Design, FMCAD, pages 101–108. IEEE, 2016.
[374]  A. W. Mazurkiewicz. Basic notions of trace theory. In Linear Time, Branching Time and Partial Order in Logics and Models for Concurrency, volume 354 of Lecture Notes in Computer Science, pages 285–363. Springer, 1988.
[375]  K. McMillan. Using unfolding to avoid the state explosion problem in the verification of asynchronous circuits. In Computer Aided Verification, CAV, volume 663 of Lecture Notes in Computer Science, pages 164–174. Springer, 1992.
[376]  K. L. McMillan. Symbolic Model Checking: An Approach to the State Explosion Problem. Kluwer, 1993.
[377]  K. L. McMillan. Circular compositional reasoning about liveness. In Correct Hardware Design and Verification Methods, CHARME, volume 1703 of Lecture Notes in Computer Science, pages 342–345. Springer, 1999.
[378]  K. L. McMillan. Verification of infinite state systems by compositional model checking. In Correct Hardware Design and Verification Methods, CHARME, volume 1703 of Lecture Notes in Computer Science, pages 219–234. Springer, 1999.
[379]  K. L. McMillan. Parameterized verification of the FLASH cache coherence protocol by compositional model checking. In Correct Hardware Design and Verification Methods, volume 2144 of Lecture Notes in Computer Science, pages 179–195. Springer, 2001.
[380]  K. L. McMillan. Applying SAT methods in unbounded symbolic model checking. In E. Brinksma and K. G. Larsen, editors, Computer Aided Verification, CAV, volume 2404 of Lecture Notes in Computer Science, pages 250–264. Springer, 2002.
[381]  K. L. McMillan. Interpolation and SAT-based model checking. In W. A. J. Hunt and F. Somenzi, editors, Computer Aided Verification, CAV, volume 2725 of Lecture Notes in Computer Science, pages 1–13. Springer, 2003.
[382]  K. L. McMillan. An interpolating theorem prover. Theor. Comput. Sci., 345(1):101–121, 2005.
[383]  K. L. McMillan. Lazy abstraction with interpolants. In Ball and Jones [39], pages 123–136.
[384]  K. L. McMillan and N. Amla. Automatic abstraction without counterexamples. In H. Garavel and J. Hatcliff, editors, Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 2619 of Lecture Notes in Computer Science, pages 2–17. Springer, 2003.
[385]  T. F. Melham. Abstraction mechanisms for hardware verification. In G. Birtwistle and P. A. Subrahmanyam, editors, VLSI Specification, Verification and Synthesis, volume SECS35, pages 267–291. Kluwer, 1988.
[386]  R. Meyer and T. Strazny. Petruchio: From dynamic networks to nets. In T. Touili, B. Cook, and P. B. Jackson, editors, Computer Aided Verification, CAV, volume 6174 of Lecture Notes in Computer Science, pages 175–179. Springer, 2010.
[387]  R. Milner. An algebraic definition of simulation between programs. In D. C. Cooper, editor, International Joint Conference on Artificial Intelligence, IJCAI, pages 481–489. Kaufmann, 1971.
[388]  R. Milner. A Calculus of Communicating Systems, volume 92 of Lecture Notes in Computer Science. Springer, 1980.
[389]  S. Minato. Techniques of BDD/ZDD: brief history and recent activity. IEICE Transactions, 96-D(7):1419–1429, 2013.
[390]  A. Miné. A few graph-based relational numerical abstract domains. In M. V. Hermenegildo and G. Puebla, editors, Static Analysis, SAS, volume 2477 of Lecture Notes in Computer Science, pages 117–132. Springer, 2002.
[391]  A. Miné. The octagon abstract domain. Higher-Order Symbolic Comput., 19(1):31–100, 2006.
[392]  B. Mishra and E. Clarke. Hierarchical verification of asynchronous circuits using temporal logic. Theor. Comput. Sci., 38:269–291, 1985.
[393]  J. Misra and K. M. Chandy. Proofs of networks of processes. IEEE Trans. Software Engineering, 7(4):417–426, 1981.
[394]  M. W. Moskewicz, C. F. Madigan, Y. Zhao, L. Zhang, and S. Malik. Chaff: Engineering an efficient SAT solver. In Design Automation Conference, DAC, pages 530–535. ACM, 2001.
[395]  R. Mukherjee, D. Kroening, and T. Melham. Hardware verification using software analyzers. In 2015 IEEE Computer Society Annual Symposium on VLSI, ISVLSI, pages 7–12. IEEE Computer Society, 2015.
[396]  G. J. Myers. The Art of Software Testing. Wiley, 2nd edition, 2004.
[397]  A. Nadel, V. Ryvchin, and O. Strichman. Efficient MUS extraction with resolution. In Formal Methods in Computer-Aided Design, FMCAD, pages 197–200. IEEE, 2013.
[398]   K. S. Namjoshi and R. J. Trefler. On the competeness of compositional reasoning. In Computer Aided Verification, CAV, volume 1855 of Lecture Notes in Computer Science, pages 139–153. Springer, 2000.
[399]  W. T. Overman. Verification of Concurrent Systems: Function and Timing. PhD thesis, University of California at Los Angeles, 1981.
[400]  R. Paige and R. E. Tarjan. Three efficient algorithms based on partition refinement. SIAM J. Comput., 16(6):973–989, 1987.
[401]  D. Park. Concurrency and automata on infinite sequences. In 5th GI-Conference on Theoretical Computer Science, volume 104 of Lecture Notes in Computer Science, pages 167–183. Springer, 1981.
[402]  C. S. Pasareanu, D. Giannakopoulou, M. G. Bobaru, J. M. Cobleigh, and H. Barringer. Learning to divide and conquer: Applying the L* algorithm to automate assume-guarantee reasoning. Formal Methods Syst. Design, 32(3):175–205, 2008.
[403]  J.-P. Pécuchet. On the complementation of Büchi automata. Theor. Comput. Sci., 47(1):95–98, 1986.
[404]  D. Peled. All from one, one for all: on model checking using representatives. In Courcoubetis [160], pages 409–423.
[405]  D. Peled. Combining partial order reductions with on-the-fly model-checking. In Dill [186], pages 377–390.
[406]  D. Peled. Verification for robust specification. In E. Gunter, editor, Conference on Theorem Proving in Higher Order Logic, volume 1275 of Lecture Notes in Computer Science, pages 231–241. Springer, 1997.
[407]  D. Peled and T. Wilke. Stutter-invariant temporal properties are expressible without the nexttime operator. Inform. Proc. Lett., 63(5):243–246, 1997.
[408]  D. Peled, T. Wilke, and P. Wolper. An algorithmic approach for checking closure properties of ω regular languages. In Concurrency Theory, CONCUR, volume 1119 of Lecture Notes in Computer Science, pages 596–610. Springer, 1996.
[409]  D. A. Peled and A. Pnueli. Proving partial order liveness properties. In International Colloquium on Automata, Languages and Programming, ICALP, volume 443 of Lecture Notes in Computer Science, pages 553–571. Springer, 1990.
[410]  D. A. Peled, A. Valmari, and I. Kokkarinen. Relaxed visibility enhances partial order reduction. Formal Methods Syst. Design, 19(3):275–289, 2001.
[411]  D. A. Peled, M. Y. Vardi, and M. Yannakakis. Black box checking. In Formal Methods for Protocol Engineering and Distributed Systems, FORTE, volume 156 of IFIP Conference Proceedings, pages 225–240. Kluwer, 1999.
[412]  W. Penczek, B. Wozna, and A. Zbrzezny. Bounded model checking for the universal fragment of CTL. Fundam. Inf., 51(1-2):135–156, 2002.
[413]  N. Piterman. From nondeterministic Büchi and Streett automata to deterministic parity automata. Logical Methods Comput. Sci., 3(3):5, 2007.
[414]  C. Pixley. Introduction to a computational theory and implementation of sequential hardware equivalence. In Kurshan and Clarke [332], pages 54–64.
[415]  C. Pixley, G. Beihl, and E. Pacas-Skewes. Automatic derivation of FSM specification to implementation encoding. In International Conference on Computer Design, ICCD, pages 245–249. IEEE Computer Society, 1991.
[416]  C. Pixley, S.-W. Jeong, and G. D. Hachtel. Exact calculation of synchronization sequences based on binary decision diagrams. In Design Automation Conference, DAC, pages 620–623. IEEE Computer Society Press, 1992.
[417]  A. Pnueli. The temporal logic of programs. In Foundations of Computer Science, FOCS, pages 46–57. IEEE Computer Society, 1977.
[418]  A. Pnueli. The temporal semantics of concurrent programs. In Semantics of Concurrent Computation, volume 70 of Lecture Notes in Computer Science, pages 1–20. Springer, 1979.
[419]  A. Pnueli. A temporal logic of concurrent programs. Theor. Comput. Sci., 13:45–60, 1981.
[420]  A. Pnueli. In transition for global to modular temporal reasoning about programs. In K. R. Apt, editor, Logics and Models of Concurrent Systems, volume 13 of NATO ASI. Series F, Computer and System Sciences. Springer, 1984.
[421]  A. Pnueli, Y. Rodeh, O. Strichman, and M. Siegel. Deciding equality formulas by small domains instantiations. In N. Halbwachs and D. A. Peled, editors, Computer Aided Verification, CAV, volume 1633 of Lecture Notes in Computer Science, pages 455–469. Springer, 1999.
[422]  A. Pnueli, J. Xu, and L. D. Zuck. Liveness with (0, 1, ∞)-counter abstraction. In Computer Aided Verification, CAV, Lecture Notes in Computer Science, pages 107–122. Springer, 2002.
[423]  V. R. Pratt. A practical decision method for propositional dynamic logic: Preliminary report. In Symposium on Theory of Computing, STOC, pages 326–337. ACM, 1978.
[424]  P. Pudlák. Lower bounds for resolution and cutting plane proofs and monotone computations. J. Symbolic Logic, 62(3):981–998, 1997.
[425]  J. P. Quielle and J. Sifakis. Specification and verification of concurrent systems in CESAR. In M. Dezani-Ciancaglini and U. Montanari, editors, International Symposium on Programming, volume 137 of Lecture Notes in Computer Science, pages 337–350, 1982.
[426]  M. O. Rabin and D. Scott. Finite automata and their decision problems. IBM Journal of Research and Development, 3(2):114–125, 1959.
[427]  S. Rajan, N. Shankar, and M. K. Srivas. An integration of model checking with automated proof checking. In P. Wolper, editor, Computer Aided Verification, CAV, volume 939 of Lecture Notes in Computer Science, pages 84–97. Springer, 1995.
[428]   R. Rajkumar. Task Synchronization in Real-Time Systems. PhD thesis, ECE, Carnegie Mellon University, 1989.
[429]  A. Rauzy. Toupie = μ calculus + constraints. In P. Wolper, editor, Computer Aided Verification, CAV, volume 939 of Lecture Notes in Computer Science, pages 114–126. Springer, 1995.
[430]  T. G. Rokicki and C. J. Myers. Automatic verification of timed circuits. In Dill [186], pages 468–480.
[431]  F. Rosa-Velardo and D. Frutos-Escrig. Decidability results for restricted models of Petri nets with name creation and replication. In International Conference on Applications and Theory of Petri Nets, volume 5606 of Lecture Notes in Computer Science, pages 63–82. Springer, 2009.
[432]  A. W. Roscoe. Model-checking CSP. In A. W. Roscoe, editor, A Classical Mind: Essays in Honour of C. A. R. Hoare, pages 353–378. Prentice-Hall, 1994.
[433]  V. Roy and R. de Simone. Auto/Autograph. In Kurshan and Clarke [332], pages 235–250.
[434]  R. Rudell. Dynamic variable ordering for ordered binary decision diagrams. In International Conference on Computer Aided Design, ICCAD, pages 42–47. IEEE Computer Society / ACM, 1993.
[435]  S. Safra. On the complexity of ω automata. In Foundations of Computer Science, FOCS, pages 319–327. IEEE Computer Society, 1988.
[436]  H. Saïdi. Model checking guided abstraction and analysis. In Static Analysis, SAS, volume 1824 of Lecture Notes in Computer Science, pages 377–396. Springer, 2000.
[437]  H. Saïdi and N. Shankar. Abstract and model check while you prove. In Computer Aided Verification, CAV, volume 1633 of Lecture Notes in Computer Science, pages 443–454. Springer, 1999.
[438]  S. Schewe. Tighter bounds for the determinisation of Büchi automata. In Foundations of Software Science and Computation Structures, FOSSACS, volume 5504 of Lecture Notes in Computer Science, pages 167–181. Springer, 2009.
[439]  P. Schnoebelen. Revisiting Ackermann-hardness for lossy counter machines and reset Petri nets. In Mathematical Foundations of Computer Science, volume 6281 of Lecture Notes in Computer Science, pages 616–628. Springer, 2010.
[440]  V. Schuppan and A. Biere. Shortest counterexamples for symbolic model checking of LTL with past. In Tools and Algorithms for the Construction and Analysis of Systems, TACAS, volume 3440 of Lecture Notes in Computer Science, pages 493–509. Springer, 2005.
[441]  V. Schuppan and A. Biere. Liveness checking as safety checking for infinite state spaces. Electr. Notes Theor. Comput. Sci., 149(1):79–96, 2006.
[442]  C. H. Seger, R. B. Jones, J. W. O’Leary, T. F. Melham, M. Aagaard, C. Barrett, and D. Syme. An industrially effective environment for formal hardware verification. IEEE Trans. CAD Integr. Circuits Syst., 24(9):1381–1405, 2005.
[443]  K. Sen and G. Agha. CUTE and jCUTE: Concolic unit testing and explicit path model-checking tools. In Ball and Jones [39], pages 419–423.
[444]  L. Sha, M. H. Klein, and J. B. Goodenough. Rate monotonic analysis for real-time systems. In Foundations of Real-Time Computing Scheduling and Resource Management, pages 129–155. Kluwer, 1991.
[445]  M. Sheeran, S. Singh, and G. Stålmarck. Checking safety properties using induction and a SAT-solver. In W. A. J. Hunt and S. D. Johnson, editors, Formal Methods in Computer Aided Design, FMCAD, volume 1954 of Lecture Notes in Computer Science, pages 108–125. Springer, 2000.
[446]  M. Sheeran and G. Stålmarck. A tutorial on Stålmarck’s proof procedure for propositional logic. Formal Methods Syst. Design, 16(1):23–58, 2000.
[447]  S. Shoham and O. Grumberg. A game-based framework for CTL counterexamples and 3-valued abstraction-refinement. ACM Trans. Computer Logic (TOCL), 9(1), 2007.
[448]  Z. Shtadler and O. Grumberg. Network grammars, communication behaviors and automatic verification. In Automatic Verification Methods for Finite State Systems, International Workshop, volume 407 of Lecture Notes in Computer Science, pages 151–165. Springer, 1990.
[449]  G. Shu and D. Lee. Testing security properties of protocol implementations—a machine learning based approach. In International Conference on Distributed Computing Systems, ICDCS. IEEE Computer Society, 2007.
[450]  G. Shurek and O. Grumberg. The modular framework of computer-aided verification: Motivation, solutions and evaluation criteria. In Kurshan and Clarke [332], pages 214–223.
[451]  D. Sieling. The nonapproximability of OBDD minimization. Inf. Comput., 172(2):103–138, 2002.
[452]  J. Sifakis, editor. Automatic Verification Methods for Finite State Systems, volume 407 of Lecture Notes in Computer Science. Springer, 1989.
[453]  A. P. Sistla. Theoretical Issues in the Design and Verification of Distributed Systems. PhD thesis, Harvard University, 1983.
[454]  A. P. Sistla and E. M. Clarke. The complexity of propositional linear temporal logics. J. ACM, 32(3):733–749, 1985.
[455]  A. P. Sistla, M. Y. Vardi, and P. Wolper. The complementation problem for Büchi automata with applications to temporal logic. Theor. Comput. Sci., 49:217–237, 1987.
[456]  R. H. Sloan and U. Buy. Stubborn sets for real-time Petri nets. Formal Methods Syst. Design, 11(1):23–40, 1997-07.
[457]  A. Slobodová, J. Davis, S. Swords, and W. A. J. Hunt. A flexible formal verification framework for industrial scale validation. In S. Singh, B. Jobstmann, M. Kishinevsky, and J. Brandt, editors, Formal Methods and Models for Codesign, MEMOCODE, pages 89–97. IEEE, 2011.
[458]  F. Somenzi. CUDD: Colorado University decision diagram package. Technical report, Colorado University, 1996.
[459]   C. Stirling. Bisimulation, modal logic and model checking games. Logic J. IGPL, 7(1):103–124, 1999.
[460]  C. Stirling. Modal and Temporal Properties of Processes. Springer, 2001.
[461]  C. Stirling and D. Walker. CCS, liveness, and local model checking in the linear time mu-calculus. In J. Sifakis, editor, Automatic Verification Methods for Finite State Systems, volume 407 of Lecture Notes in Computer Science, pages 166–178. Springer, 1989.
[462]  C. Stirling and D. Walker. Local model checking in the modal mu-calculus. Theor. Comput. Sci., 89(1):161–177, 1991.
[463]  I. Suzuki. Proving properties of a ring of finite-state machines. IPL, 28:213–214, 1988.
[464]  N. Suzuki, editor. Symbolic Computation Algorithms on Shared Memory Multiprocessors. MIT Press, 1992.
[465]  Z.-H. Tao, C.-H. Zhou, Z. Chen, and L.-F. Wang. Bounded model checking of CTL *. J. Comput. Sci. Technol., 22(1):39–43, 2007.
[466]  R. E. Tarjan. Depth first search and linear graph algorithms. SIAM J. Comput., 1:146–160, 1972.
[467]  A. Tarski. A lattice-theoretical fixpoint theorem and its applications. Pacific J. Math, 5:285–309, 1955.
[468]  W. Thomas. Automata on infinite objects. In Handbook of Theoretical Computer Science, Volume B: Formal Models and Sematics (B), pages 133–192. Elsevier and MIT Press, 1990.
[469]  W. Thomas. Complementation of Büchi automata revisited. In J. Karhumäki, H. Maurer, G. Paun, and G. Rozenberg, editors, Jewels are Forever, Contributions on Theoretical Computer Science in Honor of Arto Salomaa, pages 109–122. Springer, 1999.
[470]   G. S. Tseitin. On the complexity of derivation in propositional calculus. In Studies in Constructive Mathematics and Mathematical Logic, Part II, volume 8 of Seminars in Mathematics, pages 234–259. V.A. Steklov Mathematical Institute, 1968. English Translation: Consultants Bureau, New York, 1970, pages 115–125.
[471]  J. D. Ullman. Computational Aspects of VLSI. Computer Science Press, 1984.
[472]  A. Valmari. Stubborn sets for reduced state space generation. In Applications and Theory of Petri Nets, volume 483 of Lecture Notes in Computer Science, pages 491–515. Springer, 1989.
[473]  A. Valmari. A stubborn attack on state explosion. In Computer Aided Verification, CAV, volume 531 of Lecture Notes in Computer Science, pages 156–165. Springer, 1990.
[474]  A. Valmari. Stubborn set methods for process algebras. In Partial Order Methods in Verification, volume 29 of DIMACS Series in Discrete Mathematics and Theoretical Computer Science, pages 213–232. DIMACS/AMS, 1996.
[475]  A. Valmari and H. Hansen. Can stubborn sets be optimal? Fundam. Inform., 113(3–4):377–397, 2011.
[476]  T. van Dijk. Sylvan: multi-core decision diagrams. PhD thesis, University of Twente, Enschede, Netherlands, 2016.
[477]  T. van Dijk, A. Laarman, and J. van de Pol. Multi-core BDD operations for symbolic reachability. Electr. Notes Theor. Comput. Sci., 296:127–143, 2013.
[478]  T. van Dijk and J. van de Pol. Sylvan: multi-core framework for decision diagrams. STTT, 19(6):675–696, 2017.
[479]  M. Y. Vardi and P. Wolper. An automata-theoretic approach to automatic program verification. In Logic in Computer Science, LICS, pages 332–344. IEEE Computer Society, 1986.
[480]  M. P. Vasilevskii. Failure diagnosis of automata. Cybernetics, 9:653–665, 1973.
[481]  V. C. Vimjam and M. S. Hsiao. Explicit safety property strengthening in SAT-based induction. In International Conference on VLSI Design, VLSI, pages 63–68. IEEE Computer Society, 2007.
[482]  Y. Vizel and O. Grumberg. Interpolation-sequence based model checking. In Formal Methods in Computer-Aided Design, FMCAD, pages 1–8. IEEE, 2009.
[483]  Y. Vizel, O. Grumberg, and S. Shoham. Lazy abstraction and SAT-based reachability in hardware model checking. In Formal Methods in Computer-Aided Design, FMCAD, pages 173–181. IEEE, 2012.
[484]   Y. Vizel and A. Gurfinkel. Interpolating property directed reachability. In Computer Aided Verification, CAV, volume 8559 of Lecture Notes in Computer Science, pages 260–276. Springer, 2014.
[485]  B. Wachter, D. Kroening, and J. Ouaknine. Verifying multi-threaded software with Impact. In Formal Methods in Computer-Aided Design, FMCAD, pages 210–217. IEEE, 2013.
[486]  M. Wehrle and M. Helmert. About partial order reduction in planning and computer aided verification. In International Conference on Automated Planning and Scheduling, ICAPS. AAAI, 2012.
[487]  J. Whittemore, J. Kim, and K. A. Sakallah. SATIRE: A new incremental satisfiability engine. In Design Automation Conference, DAC, pages 542–545. ACM, 2001.
[488]  B. Willems and P. Wolper. Partial-order methods for model checking: From linear time to branching time. In Logic in Computer Science, LICS, pages 294–303. IEEE Computer Society, 1996.
[489]  G. Winskel. Event structures. In Petri Nets: Central Models and Their Properties, Advances in Petri Nets 1986, Part II, Proceedings of an Advanced Course, volume 255 of Lecture Notes in Computer Science, pages 325–392. Springer, 1986.
[490]  G. Winskel. A note on model checking in the modal ν calculus. In International Colloquium on Automata, Languages and Programming, ICALP, volume 372 of Lecture Notes in Computer Science, pages 761–772. Springer, 1989.
[491]  T. Witkowski, N. Blanc, D. Kroening, and G. Weissenbacher. Model checking concurrent Linux device drivers. In R. E. K. Stirewalt, A. Egyed, and B. Fischer, editors, Automated Software Engineering, ASE, pages 501–504. ACM, 2007.
[492]  P. Wolper. Temporal logic can be more expressive. In Foundations of Computer Science, FOCS, pages 340–348. IEEE Computer Society, 1981.
[493]  P. Wolper. Specification and synthesis of communicating processes using an extended temporal logic. In Principles of Programming Languages, POPL, pages 20–33. ACM, 1982.
[494]  P. Wolper. Expressing interesting properties of programs in propositional temporal logic. In Principles of Programming Languages, POPL, pages 184–193. ACM, 1986.
[495]  P. Wolper and P. Godefroid. Partial-order methods for temporal verification. In Concurrency Theory, CONCUR, volume 715 of Lecture Notes in Computer Science, pages 233–246. Springer, 1993.
[496]  P. Wolper and V. Lovinfosse. Verifying properties of large sets of processes with network invariants. In Sifakis [452], pages 68–80.
[497]  J. Yang, A. Mok, and F. Wang. Symbolic model checking for event-driven real-time systems. In Real-Time Systems Symposium, RTSS, pages 23–32. IEEE Computer Society, 1993.
[498]  T. Yoneda and B.-H. Schlingloff. Efficient verification of parallel real-time systems. Formal Methods Syst. Design, 11(2):197–215, 1997.
[499]  T. Yoneda, A. Shibayama, B.-H. Schlingloff, and E. M. Clarke. Efficient verification of parallel real-time systems. In Courcoubetis [160], pages 321–332.
[500]  L. Zhang, C. F. Madigan, M. W. Moskewicz, and S. Malik. Efficient conflict driven learning in Boolean satisfiability solver. In R. Ernst, editor, International Conference on Computer-Aided Design, ICCAD, pages 279–285. IEEE Computer Society, 2001.
[501]  L. Zhang and S. Malik. Conflict driven learning in a quantified Boolean satisfiability solver. In L. T. Pileggi and A. Kuehlmann, editors, International Conference on Computer-Aided Design, ICCAD, pages 442–449. ACM / IEEE Computer Society, 2002.
